---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
import { Aside } from '@astrojs/starlight/components';
import Commit from './Commit.astro';
import DownloadChart from './svelte/charts/downloads/DownloadChart.svelte';
import BarChart from './svelte/charts/BarChart.svelte';
import { getPluginDataArray } from '../utils/data';
import type { PluginWarning } from '../../../data-wasm/pkg/data_wasm';

const { pluginId } = Astro.props as { pluginId: string };
if (!pluginId) {
	throw new Error('Plugin ID is required');
}

const data = await getPluginDataArray();
const view = data.view();
const plugin = view.get_by_id(data, pluginId);
if (!plugin) {
	throw new Error(`Plugin with ID ${pluginId} not found.`);
}

const pluginDownloadData = plugin.download_data_points();

function getFundingLinks(urls: string | Record<string, string> | undefined): { text: string; href: string }[] {
	if (!urls) {
		return [];
	}

	if (typeof urls === 'string') {
		return [{ text: 'Support the Author', href: urls }];
	}

	return Object.entries(urls).map(([text, href]) => ({ text: `Support the Author via ${text}`, href }));
}

const helpUrl = plugin.help_url();
const obsidianUrl = plugin.obsidian_url();
const obsidianHubUrl = plugin.obsidian_hub_url();
const authorUrl = plugin.author_url();
const fundingUrl = plugin.funding_url();

const external_links: { text: string; href: string }[] = [
	helpUrl ? { text: 'Plugin Docs', href: helpUrl } : undefined,
	{ text: 'GitHub Repo', href: plugin.repo_url() },
	obsidianUrl ? { text: 'View in Obsidian', href: obsidianUrl } : undefined,
	obsidianHubUrl ? { text: 'View on the Obsidian Hub', href: obsidianHubUrl } : undefined,
	authorUrl ? { text: 'Author Website', href: authorUrl } : undefined,
	...getFundingLinks(plugin.funding_url()),
].filter(x => x !== undefined);

const warnings = plugin.warnings();
const versions = plugin.versions();
const changes = plugin.changes();

function getAsideVariant(warning: PluginWarning): 'note' | 'tip' | 'caution' | 'danger' {
	if (warning.severity === 'CAUTION') {
		return 'caution';
	} else if (warning.severity === 'DANGER') {
		return 'danger';
	}

	return 'note';
}

const loc = plugin.loc();
const totalLoc = loc?.reduce((acc, x) => acc + x.value, 0);
---

<StarlightPage
	frontmatter={{
		title: plugin.name(),
		description: `Page for the ${plugin.name()} plugin.`,
		links: external_links,
	}}
	headings={[
		{ depth: 2, text: 'Data', slug: 'data' },
		{ depth: 3, text: 'Changes', slug: 'changes' },
		{ depth: 3, text: 'Repository Data', slug: 'repository-data' },
		{ depth: 3, text: 'Lines of Code', slug: 'loc' },
		{ depth: 2, text: 'Downloads', slug: 'downloads' },
		{ depth: 2, text: 'Version History', slug: 'version-history' },
	]}
>
	<p>{plugin.description()}</p>

	{
		warnings.map(warning => {
			switch (warning.id) {
				case 'Inactivity12Months':
					return (
						<Aside type={getAsideVariant(warning)} title="Inactivity Warning">
							<p>
								The latest version <code>{warning.latest_version}</code> of this plugin was released on the {warning.last_release_date} and is thus more than
								one year old.
							</p>
						</Aside>
					);
				case 'Inactivity24Months':
					return (
						<Aside type={getAsideVariant(warning)} title="Inactivity Warning">
							<p>
								The latest version <code>{warning.latest_version}</code> of this plugin was released on the {warning.last_release_date} and is thus more than
								two years old.
							</p>
						</Aside>
					);
				case 'Removed':
					return (
						<Aside type={getAsideVariant(warning)} title="Removed Plugin">
							<p>
								{warning.removed_reason ? (
									<>
										This plugin has been removed from the community list on <Commit commit={warning.removed_commit} /> with reason{' '}
										<i>{warning.removed_reason}</i> and can no longer be installed.
									</>
								) : (
									<>
										This plugin has been removed from the community list on <Commit commit={warning.removed_commit} /> and can no longer be installed.
									</>
								)}
							</p>
						</Aside>
					);
				case 'MismatchedManifestData':
					return (
						<Aside type={getAsideVariant(warning)} title="Mismatched Data">
							<p>The data in the community list does not match the data in the plugin's repository.</p>
							<table class="full-width">
								<thead>
									<tr>
										<th>Property</th>
										<th>Community List</th>
										<th>Repository</th>
									</tr>
								</thead>
								<tbody>
									{warning.data.map(x => (
										<tr>
											<td>{x.field}</td>
											<td>{x.community_list_value}</td>
											<td>{x.manifest_value}</td>
										</tr>
									))}
								</tbody>
							</table>
						</Aside>
					);
				case 'Unlicensed':
					return (
						<Aside type={getAsideVariant(warning)} title="Unlicensed Plugin">
							<p>
								This plugin is explicitly not licensed, thus the author has all rights reserved. This means that it can not be forked or maintained by another
								developer without explicit approval be the current author.
							</p>
							<p>
								This information is based on the <code>LICENSE</code> file in the plugin's repository. Identification of said file may not be accurate.
							</p>
						</Aside>
					);
				case 'NoLicense':
					return (
						<Aside type={getAsideVariant(warning)} title="Unlicensed Plugin">
							<p>
								This plugin intentionally or unintentionally specified no license. This means that it can not be forked or maintained by another developer
								without explicit approval be the current author. Please consider asking the developer to add a license to{' '}
								<a href={`https://github.com/${plugin.repo_url()}`} target="_blank">
									their repository
								</a>
								.
							</p>
							<p>
								This information is based on the absence of a <code>LICENSE</code>, <code>LICENSE.md</code>, or <code>LICENSE.txt</code> file in the plugin's
								repository.
							</p>
						</Aside>
					);
				case 'MismatchedLicense':
					return (
						<Aside type={getAsideVariant(warning)} title="Mismatched License">
							<p>
								The license information in the plugin's <code>package.json</code> file (<code>{warning.package_json_license}</code>) does not match the{' '}
								<code>LICENSE</code> file (<code>{warning.license_file}</code>) in the repository. The <code>LICENSE</code> file takes precedence, but please
								consider asking the developer to clarify the license of the plugin.
							</p>
							<p>
								This information is based on the <code>LICENSE</code> file in the plugin's repository. Identification of said file may not be accurate.
							</p>
						</Aside>
					);
				case 'MissingExtendedData':
					return (
						<Aside type={getAsideVariant(warning)} title="Data Analysis Failed">
							<p>Something went wrong while analyzing the plugin's repository.</p>
						</Aside>
					);
				case 'MissingRepoData':
					return (
						<Aside type={getAsideVariant(warning)} title="Data Analysis Failed">
							<p>Something went wrong while analyzing the plugin's repository. The reason for the error is displayed below.</p>
							<p>
								<code>{warning.message}</code>
							</p>
						</Aside>
					);
			}
		})
	}

	{(warnings.length ?? 0) > 0 && <p class="muted">The above warnings are based on limited information and might not always be accurate.</p>}

	<h2 id="data">Data</h2>

	<table class="full-width">
		<tbody>
			<tr>
				<td>ID</td>
				<td>{plugin.id()}</td>
			</tr>
			<tr>
				<td>Author</td>
				<td
					>{
						authorUrl ? (
							<a href={authorUrl} target="_blank">
								{plugin.author()}
							</a>
						) : (
							plugin.author()
						)
					}</td
				>
			</tr>
			{
				fundingUrl && (
					<tr>
						<td>Funding</td>
						<td>
							{getFundingLinks(fundingUrl).map(link => (
								<>
									<a href={link.href}>{link.text}</a> <br />
								</>
							))}
						</td>
					</tr>
				)
			}
			{
				plugin.min_app_version() && (
					<tr>
						<td>Minimum Obsidian Version</td>
						<td>{plugin.min_app_version()}</td>
					</tr>
				)
			}
			<tr>
				<td>Official Release Date</td>
				<td><Commit commit={plugin.added_commit()} /></td>
			</tr>
			<tr>
				<td>Last update</td>
				<td>{plugin.last_updated_date()}</td>
			</tr>
		</tbody>
	</table>

	<h3 class="only-show-small">Quick Links</h3>
	<ul class="only-show-small">
		{
			external_links.map(link => (
				<li>
					<a href={link.href} target="_blank">
						{link.text}
					</a>
				</li>
			))
		}
	</ul>

	<h3 id="changes">Changes</h3>

	<table class="full-width">
		<thead>
			<tr>
				<th>Date</th>
				<th>Changed Property</th>
				<th>Old Value</th>
				<th>New Value</th>
			</tr>
		</thead>
		<tbody>
			{
				changes.map(change => (
					<tr>
						<td>
							<Commit commit={change.commit} />
						</td>
						<td>{change.property}</td>
						<td>{change.old_value}</td>
						<td>{change.new_value}</td>
					</tr>
				))
			}
		</tbody>
	</table>

	<h3 id="repository-data">Repository Data</h3>

	{
		plugin.has_repo_data() ? (
			<>
				<table class="full-width">
					<tbody>
						<tr>
							<td>License</td>
							<td>
								<code>{plugin.license_package_json()}</code> in <code>package.json</code> <br /> <code>{plugin.license_file()}</code> in <code>LICENSE</code>{' '}
								file
							</td>
						</tr>
						<tr>
							<td>Package Manager</td>
							<td>{plugin.package_managers_str() ?? <span class="muted">Unknown (no lock file found)</span>}</td>
						</tr>
						<tr>
							<td>Uses Typescript</td>
							<td>
								{plugin.uses_typescript() ? (
									'Yes'
								) : (
									<>
										No <code>.ts</code> or <code>.tsx</code> files found
									</>
								)}
							</td>
						</tr>
						<tr>
							<td>Installed Bundlers</td>
							<td>{plugin.bundlers_str() ?? <span class="muted">None found</span>}</td>
						</tr>
						<tr>
							<td>Installed Testing Frameworks</td>
							<td>{plugin.testing_frameworks_str() ?? <span class="muted">None found</span>}</td>
						</tr>
						<tr>
							<td>Has Test Files</td>
							<td>{plugin.has_test_files() ? 'Yes' : 'No'}</td>
						</tr>
						<tr>
							<td>Uses BRAT beta releases</td>
							<td>{plugin.has_beta_manifest() ? 'Yes' : 'No'}</td>
						</tr>
						<tr>
							<td>Dependencies</td>
							<td>
								{plugin.has_package_json() ? (
									(plugin.dependencies_str() ?? <span class="muted">None</span>)
								) : (
									<span class="muted">
										No <code>package.json</code> found
									</span>
								)}
							</td>
						</tr>
						<tr>
							<td>Dev Dependencies</td>
							<td>
								{plugin.has_package_json() ? (
									(plugin.dev_dependencies_str() ?? <span class="muted">None</span>)
								) : (
									<span class="muted">
										No <code>package.json</code> found
									</span>
								)}
							</td>
						</tr>
					</tbody>
				</table>

				<p class="muted">
					<i>License</i> information is extracted from the <code>package.json</code> and the <code>LICENSE</code> file. If they do not match, say{' '}
					<code>unknown</code>, or say <code>not found</code>, please check the repository or contact the author for clarification. This is not legal advice.
				</p>
				<p class="muted">
					<i>Has Test Files</i> looks for files ending in <code>.test.js</code>, <code>.test.ts</code>, <code>.spec.js</code> or <code>.spec.ts</code>.
				</p>
				<p class="muted">
					<i>Installed Testing Frameworks</i> looks at installed dependencies. This does not mean that a plugin is actually using the testing framework.
				</p>
				<p class="muted">
					<i>Dependencies</i> and <i>Dev Dependencies</i> only list the direct dependencies of the plugin.
				</p>
			</>
		) : (
			<p class="muted">No repository data available.</p>
		)
	}

	<h3 id="loc">Lines of Code</h3>

	{
		loc && (
			<>
				<p>
					The plugin has a total of <b>{totalLoc}</b> lines of code. The following chart shows the lines of code split by programming language.
				</p>

				<BarChart dataPoints={loc} xLabel="Language" yLabel="Lines of Code" skewLabels client:idle />
			</>
		)
	}

	{!loc && <p class="muted">No data available.</p>}

	<h2 id="downloads">Downloads</h2>

	<p>
		The following chart shows the total number of downloads of the plugin over time. The second chart shows the delta of downloads per week, which is the number
		of new downloads per week. New version releases are marked with vertical lines.
	</p>

	<DownloadChart dataPoints={pluginDownloadData} versions={versions} client:idle />

	<h2 id="version-history">Version History</h2>

	<table class="full-width">
		<thead>
			<tr>
				<th>Version</th>
				<th>Release Date</th>
				<th>Note</th>
			</tr>
		</thead>
		<tbody>
			{
				versions.map(version => (
					<tr>
						<td>{version.version}</td>
						<td>{version.date}</td>
						<td>{version.deprecated ? <>Blacklisted</> : <span class="muted">None</span>}</td>
					</tr>
				))
			}
		</tbody>
	</table>

	{
		versions.some(x => x.deprecated) && (
			<p class="muted">
				<i>Blacklisted</i> versions are versions that are known to cause major issues or contain security concerns and have thus been blacklisted by the
				Obsidian team. Obsidian will disable plugins on startup whose installed version is blacklisted. It is strongly recommended to update to a newer version.
			</p>
		)
	}
</StarlightPage>
