---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
import StackedXBarChart from '../../components/svelte/charts/StackedXBarChart.svelte';
import AssetSizeChart from '../../components/svelte/charts/release/AssetSizeChart.svelte';
import { getReleaseDataArray } from '../../utils/data';

const dataArray = await getReleaseDataArray();

const assetTypes = dataArray.get_asset_type_percentages();
const assetSize = dataArray.get_asset_size_by_version();
const assetInstructionSet = dataArray.get_asset_instruction_set_percentages();
---

<StarlightPage
	frontmatter={{
		title: 'Release Assets',
		description: `Stats about the asset types and sizes of Obsidian releases.`,
	}}
	headings={[]}
>
	<p>This page looks at the assets that are included in Obsidian releases, including the types of assets, their sizes, and what type of PCs they are for.</p>

	<p>
		The following graph groups the assets by type. The first bar shows the distribution of downloads among the different asset types. The second bar shows the
		distribution of how many assets of each type are included in all releases. The third bar shows the distribution of the average sizes of each asset type.
	</p>

	<StackedXBarChart dataPoints={assetTypes} percentages client:idle />

	<p>
		The next graph shows the evolution of asset sizes over time. The data is split by asset type. Note that gaps may appear, as not every asset type is included
		in every release. The macOS <code>.dmg</code> assets are about twice as large as others, as they include both an x86 and an ARM version of the app. The <code
			>.exe</code
		> assets after version <code>1.6.0</code> are even larger, as they contain an x86, a 32 bit x86, and an ARM version of the app in a singe installer.
	</p>

	<AssetSizeChart dataPoints={assetSize} client:idle />

	<p>
		This graph shows the split between downloads of assets for different instruction sets. The instruction set is the type of CPU architecture that the asset is
		built for, such as x86 or ARM. From this we can see that downloads for only-ARM assets make up only {
			assetInstructionSet.find(x => x.layer === 'ARM')?.value?.toFixed(1)
		}% of the total downloads. The Windows <code>.exe</code> assets for version <code>1.6.0</code> and later and the macOS <code>.dmg</code> assets are combined
		installers that include both x86 and ARM versions, and are thus labeled as "Both".
	</p>

	<StackedXBarChart dataPoints={assetInstructionSet} percentages client:idle />
</StarlightPage>
